import tensorflow as tf

# linear_model: y = W*x + b
W = tf.Variable([.1], dtype=tf.float32)
b = tf.Variable([-.1], dtype=tf.float32)

x = tf.placeholder(tf.float32, name='x')
y = tf.placeholder(tf.float32, name='y')

# create linear model
linear_model = W * x + b

# create loss model
with tf.name_scope("loss-model"):
    loss = tf.reduce_sum(tf.square(linear_model -y))
    #Add scalar to the output of the loss model to observe the convergence curve of loss
    tf.summary.scalar("loss", loss)

# create a optimizer use Gradient Descent algorithm.
optimizer = tf.train.GradientDescentOptimizer(0.001)
train = optimizer.minimize(loss)

# create session use compute
sess = tf.Session()
init = tf.global_variables_initializer()
sess.run(init)

# merges all sunmaries collected in the default graph
merged = tf.summary.merge_all()

#All data generated by the model run is saved to the /tmp/tensorflow folder for use by TensorBoard
writer = tf.summary.FileWriter('/tmp/tensorflow', sess.graph)

# train dataset
x_train = [1, 2, 3, 6, 8]
y_train = [4.8, 8.5, 10.4, 21.0, 25.3]

# Training 10,000 times
for i in range(10000):
    # Pass in merge during training
    summary, _ = sess.run([merged, train], {x: x_train, y: y_train})
    # collected output train data
    writer.add_summary(summary, i)

current_W, current_b, current_loss = sess.run([W, b, loss], {x: x_train, y: y_train})

# Print the results after training
print("After train W: %s b: %s, loss: %s" % (current_W, current_b, current_loss))
